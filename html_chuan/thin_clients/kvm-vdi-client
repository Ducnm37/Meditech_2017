#!/usr/bin/env python
import gtk, glib
import webkit
import json
from ConfigParser import ConfigParser
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
from PyQt4 import QtGui
import sys
import threading
from random import choice
from string import ascii_uppercase
from string import ascii_lowercase
from string import digits
import os
import time
import logging
import logging.config

# Khai bao bien
config = ConfigParser()
config.read('/usr/local/VDI-client/config')
logging.config.fileConfig('/usr/local/VDI-client/config')
logger = logging.getLogger('root')
dashboard_path = config.get('server', 'address')
use_hypervisor_address = config.get('remote_viewer', 'use_hypervisor_address')
autologin = int(config.get('remote_viewer', 'autologin'))
cfg_username = config.get('remote_viewer', 'username')
cfg_password = config.get('remote_viewer', 'password')
autoexit = config.getboolean('remote_viewer', 'autoexit')


http_headers = {
    'User-Agent': 'KVM-VDI client',
}
w = gtk.Window() # tao doi tuong gtk de mo cua so giao dien

v = webkit.WebView() # tao doi tuong webkit de lay noi dung web

v.props.settings.props.enable_default_context_menu = False

sw = gtk.ScrolledWindow() # tao doi tuong gtk de co the cuon cua so w

w.add(sw)
sw.add(v)
w.maximize()

w.connect("destroy", lambda q: gtk.main_quit()) # tao dau X de close cua so

http_session = requests.session() # tao bien lay session web

username = ""
password = ""
refresh_run = 1
client_path = ""
engine = ""
client_path = "/client.php"

class Login(QtGui.QDialog):# QtGui la app giao dien, ket hop voi QDialog
    def __init__(self, parent=None):
        super(Login, self).__init__(parent)
        # tao doi tuong QtGui.QLineEdit la cac form dang nhap
        self.User = QtGui.QLineEdit(self)
        self.Pass = QtGui.QLineEdit(self)

        # gan tieu de cho cac form
        self.LabelUser=QtGui.QLabel(self)
        self.LabelUser.setText("Username:")
        self.LabelPass=QtGui.QLabel(self)
        self.LabelPass.setText("Password:")

        # che giau thong tin password
        self.Pass.setEchoMode(QtGui.QLineEdit.Password)

        # tao button Login
        self.buttonLogin = QtGui.QPushButton('Login', self)

        # click button se goi den ham handleLogin
        self.buttonLogin.clicked.connect(self.handleLogin)
        
        # tao doi tuong layout kieu QtGui.QVBoxLayout
        layout = QtGui.QVBoxLayout(self)

        # add cac option
        layout.addWidget(self.LabelUser)
        layout.addWidget(self.User)
        layout.addWidget(self.LabelPass)
        layout.addWidget(self.Pass)
        layout.addWidget(self.buttonLogin)

    # function xu ly login
    def handleLogin(self):
        global username
        global password
        global client_path
        global engine

        # lay text trong form login
        username = str(self.User.text())
        password = str(self.Pass.text())
  
        # lay session web va post thong tin login
        reply = http_session.post(dashboard_path+"client_pools.php", data={'username': username, 'password': password}, verify=False, headers=http_headers)
        #print(reply)
        if reply.text!='LOGIN_FAILURE':

            # connect den function pool_click
            v.connect("notify::title", pool_click)

            # lay html string tu web
            v.load_html_string(str(reply.text),dashboard_path) # ham str(...) la ep kieu string

            if reply.headers['KVM-VDI-engine'] == 'OpenStack':
                logger.debug("Using OpenStack engine")
                engine = reply.headers['KVM-VDI-engine']
                client_path = "/inc/infrastructure/OpenStack/GetClientConnection.php"
            else:
                logger.debug("Using KVM engine")

            self.accept()
        else:
            QtGui.QMessageBox.warning(self, 'Error', 'Bad user or password')


def AutoLogin():
    global username
    global password
    username=cfg_username
    password=cfg_password
    reply=http_session.post(dashboard_path+"client_pools.php", data={'username': username, 'password': password}, verify=False, headers=http_headers)
    if reply.text!='LOGIN_FAILURE':
        v.connect("notify::title", pool_click)
        v.load_html_string(str(reply.text),dashboard_path)

class vm_heartbeat(threading.Thread):
    def __init__(self, vm_id):
        super(vm_heartbeat, self).__init__()
        self._stop = threading.Event()
        self.vm_id = vm_id
    def stop(self):
        self._stop.set()
    def stopped(self):
        return self._stop.isSet()
    def run(self):
        global engine
        seconds=0
        while not self.stopped():
            if seconds==30:
                if engine == 'OpenStack':
                    hb_reply = http_session.post(dashboard_path+"client_hb.php", data={'vm_id': self.vm_id}, verify=False, headers=http_headers)
                else:
                    hb_reply = http_session.post(dashboard_path+"client_hb.php", data={'vmname': self.vm_id}, verify=False, headers=http_headers)
                logger.debug("VM heartbeat")
                seconds=0
            if not self.stopped() and seconds < 30: #sleep for one second. Longer sleep times cause thread to wait on exit.
                time.sleep(1)
                seconds += 1

def dashboard_reload():
    try:
        page=http_session.get(dashboard_path+"client_pools.php", verify=False, headers=http_headers)
        glib.idle_add(v.load_html_string,str(page.text),dashboard_path)
    except:
        logger.debug ("Dashboard timeout")

class refresh_timer(threading.Thread):
    def __init__(self):
        super(refresh_timer, self).__init__()
        self._stop = threading.Event()
    def stop(self):
        self._stop.set()
    def stopped(self):
        return self._stop.isSet()
    def run(self):
        global refresh_run
        seconds=0
        while not self.stopped():
            if seconds==5:
                if refresh_run==1:
                    logger.debug ("Dashboard reload")
                    dashboard_reload()
                seconds=0
            if not self.stopped() and seconds < 5: #sleep for one second. Longer sleep times cause thread to wait on exit.
                time.sleep(1)
                seconds += 1


class remote_viewer(threading.Thread):
    def __init__(self,data):
        super(remote_viewer, self).__init__()
        self._stop = threading.Event()
        self.data = data
    def stop(self):
        self._stop.set()
    def stopped(self):
        return self._stop.isSet()
    def run(self):
        global refresh_run
        if engine == 'OpenStack':
            vm_id = self.data['vm_id']
        else:
            vm_id = self.data['name']
        t = vm_heartbeat(vm_id)
        t.daemon=True
        t.start()
        tmp=self.data["address"].split(":")
        spice_password=self.data["spice_password"]
        tmpname=(''.join(choice(ascii_uppercase+ascii_lowercase+digits) for i in range(13)))
        viewer_config=ConfigParser()
        viewer_config.add_section('virt-viewer')
        viewer_config.set('virt-viewer', 'type', 'spice')
        viewer_config.set('virt-viewer', 'host', tmp[0])
        viewer_config.set('virt-viewer', 'port', tmp[1])
        viewer_config.set('virt-viewer', 'delete-this-file', '0')
        viewer_config.set('virt-viewer', 'password', spice_password)
        with open('/tmp/' + tmpname + '.cfg', 'wb') as configfile:
            viewer_config.write(configfile)
        os.system("remote-viewer --kiosk-quit=on-disconnect  --kiosk /tmp/" + tmpname + ".cfg ")
        dashboard_reload();
        logger.info("Exiting virt-viewer")
        refresh_run=1
        t.stop()
        t.join()
        if autoexit:
            logger.debug("autoexit is set to 1, exiting kvm-vdi-client")
            os._exit(0)
        self.stop()



def pool_click(v, param):
    if not v.get_title():
        return
    if v.get_title().startswith("kvm-vdi-msg:"):
        vdi_message=v.get_title().replace("kvm-vdi-msg:","")
        if vdi_message.startswith("PM:"):
            vdi_message=vdi_message.replace("PM:","")
            vdi_PM=vdi_message.split(":")
            if vdi_PM[0]=="shutdown":
                PM_reply=http_session.post(dashboard_path+"client_power.php", data={'vm': vdi_PM[1], 'action': "shutdown"}, verify=False, headers=http_headers)
            if vdi_PM[0]=="destroy":
                PM_reply=http_session.post(dashboard_path+"client_power.php", data={'vm': vdi_PM[1], 'action': "destroy"}, verify=False, headers=http_headers)
            dashboard_reload()
        else:
            global refresh_run
            refresh_run=0;
            vmid=vdi_message
            reply=http_session.post(dashboard_path + client_path, data={'vmid': vmid, 'protocol': "SPICE", 'username': username, 'password': password, 'use_hypervisor_address': use_hypervisor_address} ,verify=False, headers=http_headers);
            data=json.loads(reply.text)
            logger.debug(data)
            if data['status']=='MAINTENANCE':
                dashboard_reload()
                refresh_run=1
            if data['status']=='NO_FREE_VMS':
                dashboard_reload()
                refresh_run=1
            retries=0
            while data['status']=="BOOTUP" and retries < 10 :
                logger.info("BOOTUP, waiting")
                reply=http_session.post(dashboard_path + client_path, data={'vmid': vmid, 'protocol': "SPICE", 'username': username, 'password': password, 'use_hypervisor_address': use_hypervisor_address} ,verify=False, headers=http_headers);
                data=json.loads(reply.text)
                time.sleep(1)
            logger.debug("Got reply from dashboard: %s", data)
            if data['status']=='OK':
                #dashboard_reload()
                logger.info("OK, starting HB thread & viewer")
                viewer=remote_viewer(data)
                viewer.start()


app = QtGui.QApplication(sys.argv)
if not autologin:
    login = Login()
    if login.exec_() == QtGui.QDialog.Accepted:
        r_t=refresh_timer()
        r_t.start()
        w.set_title("KVM-VDI clienttttttttttt")
        w.show_all()
        gtk.main()
else:
    AutoLogin()
    r_t=refresh_timer()
    r_t.start()
    w.set_title("KVM-VDI client")
    w.show_all()
    gtk.main()
r_t.stop()
r_t.join()
#t.stop()
#r_t.join()
#t.join()
